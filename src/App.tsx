import React, { useEffect, useRef, useState } from "react";
import {
  Brain,
  TrendingUp,
  Wallet,
  Menu,
  X,
  ArrowRight,
  CheckCircle2,
  Linkedin,
  Github,
  Facebook,
  ChevronLeft,
  ChevronRight,
  Globe,
  SunMoon,
} from "lucide-react";
import { motion, AnimatePresence, useInView } from "framer-motion";

/**
 * JOROGOTech Landing - Single file App
 * - TypeScript + React + Tailwind + Framer Motion
 * - Features: language toggle (pt/en), dark mode, IA Detector product + demo (simulated),
 *   testimonials carousel, responsive header/mobile menu.
 */

/* ---------- Translations ---------- */
const translations: Record<string, any> = {
  pt: {
    start: "Começar Agora",
    home: "Início",
    products: "Produtos",
    about: "Sobre",
    contact: "Contactos",
    heroTitle: "Tecnologia e Inteligência Artificial ao Serviço da Inovação",
    heroSubtitle: "Soluções inteligentes para empresas modernas.",
    productsTitle: "Nossos Produtos",
    detectorTitle: "Teste o nosso Detector de IA",
    testimonialsTitle: "O que dizem sobre nós",
    aboutTitle: "Sobre a JOROGOTech",
    ctaText: "Pronto para impulsionar o seu negócio com tecnologia e IA?",
    ctaButton: "Começar Agora",
    detectorPlaceholder: "Cole aqui um texto para análise...",
    detectorAnalyze: "Analisar",
    detectorClear: "Limpar",
    detectorNote:
      "Nota: esta ferramenta é uma simulação para demonstração de UX e não substitui uma análise profissional.",
    resultEmpty: "Cole um texto e prima Analisar para ver um resultado simulado.",
    resultWords: "Palavras",
    resultDiversity: "Diversidade",
    resultRepetition: "Repetição",
    resultScore: "Score (sim.)",
  },
  en: {
    start: "Get Started",
    home: "Home",
    products: "Products",
    about: "About",
    contact: "Contact",
    heroTitle: "Technology and Artificial Intelligence Driving Innovation",
    heroSubtitle: "Smart solutions for modern businesses.",
    productsTitle: "Our Products",
    detectorTitle: "Try our AI Detector",
    testimonialsTitle: "What people say about us",
    aboutTitle: "About JOROGOTech",
    ctaText: "Ready to power your business with AI and technology?",
    ctaButton: "Get Started",
    detectorPlaceholder: "Paste a text here to analyze...",
    detectorAnalyze: "Analyze",
    detectorClear: "Clear",
    detectorNote:
      "Note: this tool is a simulation for UX/demo and not a replacement for professional analysis.",
    resultEmpty: "Paste text and click Analyze to see a simulated result.",
    resultWords: "Words",
    resultDiversity: "Diversity",
    resultRepetition: "Repetition",
    resultScore: "Score (sim.)",
  },
};

/* ---------- Data ---------- */
type Product = {
  icon: React.ComponentType<any>;
  titleKey: string;
  descriptionKey: string;
  color: string;
};

const productsBase = (t: any): Product[] => [
  {
    icon: Brain,
    titleKey: t === translations.pt ? "Assistente de Atendimento com IA" : "AI Customer Assistant",
    descriptionKey:
      t === translations.pt
        ? "Automatiza conversas e suporte ao cliente usando inteligência artificial, oferecendo respostas rápidas e consistentes."
        : "Automates conversations and customer support using AI, delivering fast and consistent replies.",
    color: "from-cyan-500 to-blue-600",
  },
  {
    icon: TrendingUp,
    titleKey: t === translations.pt ? "Aviator Analyzer Pro" : "Aviator Analyzer Pro",
    descriptionKey:
      t === translations.pt
        ? "Plataforma de análise preditiva baseada em machine learning para identificar padrões e tendências em dados."
        : "Predictive ML platform to identify patterns and trends in data.",
    color: "from-blue-500 to-indigo-600",
  },
  {
    icon: Wallet,
    titleKey: t === translations.pt ? "Finance Planner" : "Finance Planner",
    descriptionKey:
      t === translations.pt
        ? "Software SaaS de planeamento financeiro que ajuda pessoas e empresas a gerir receitas, despesas e metas com inteligência."
        : "SaaS financial planner helping individuals and companies manage income, expenses and goals smartly.",
    color: "from-cyan-600 to-teal-600",
  },
  {
    icon: Brain,
    titleKey: t === translations.pt ? "IA Detector" : "AI Detector",
    descriptionKey:
      t === translations.pt
        ? "Ferramenta que analisa textos e identifica se foram gerados por inteligência artificial com base em padrões linguísticos e estatísticos."
        : "Tool that analyzes texts and identifies if they were generated by AI using linguistic and statistical patterns.",
    color: "from-indigo-500 to-purple-600",
  },
];

const initialTestimonials = [
  {
    quote: "O Assistente de Atendimento da JOROGOTech revolucionou o nosso suporte ao cliente.",
    author: "Empresário Local",
  },
  {
    quote: "O Finance Planner ajudou-me a organizar o meu orçamento em minutos.",
    author: "Utilizador Beta",
  },
  {
    quote: "O Aviator Analyzer Pro é simplesmente genial — os gráficos são lindos e precisos!",
    author: "Analista Financeiro",
  },
];

/* ---------- Utilities / Hooks ---------- */
function useAutoCarousel(length: number, delay = 4500) {
  const [index, setIndex] = useState(0);
  useEffect(() => {
    const id = setInterval(() => {
      setIndex((prev) => (prev + 1) % length);
    }, delay);
    return () => clearInterval(id);
  }, [length, delay]);
  return { index, setIndex };
}

/* ---------- Simulated IA Detector ---------- */
/**
 * Simple heuristic simulation — NOT a real detector.
 */
function simulateAiScore(text: string) {
  const trimmed = text.trim();
  if (!trimmed) return { verdict: "Empty", confidence: 0 };
  const words = trimmed.split(/\s+/).filter(Boolean);
  const total = words.length;
  const uniq = new Set(words.map((w) => w.toLowerCase().replace(/[^\wÀ-ú]/g, ""))).size;
  const diversity = uniq / total;
  const freq: Record<string, number> = {};
  words.forEach((w) => {
    const k = w.toLowerCase().replace(/[^\wÀ-ú]/g, "");
    if (!k) return;
    freq[k] = (freq[k] || 0) + 1;
  });
  const maxFreq = Math.max(...Object.values(freq), 0);
  const repetitiveness = maxFreq / total;
  let score = 0.5 + (0.4 * repetitiveness) - (0.3 * diversity);
  const lengthFactor = Math.min(1, total / 80);
  score = 0.5 * (1 - lengthFactor) + score * lengthFactor;
  score = Math.max(0, Math.min(1, score));
  const confidence = Math.round((0.4 + 0.6 * Math.abs(score - 0.5) * 2) * 100);
  const verdict = score > 0.58 ? "Provavelmente IA" : score < 0.42 ? "Provavelmente Humano" : "Indeterminado";
  return {
    verdict,
    confidence,
    score: Math.round(score * 100) / 100,
    totalWords: total,
    diversity: Math.round(diversity * 100) / 100,
    repetitiveness: Math.round(repetitiveness * 100) / 100,
  };
}

/* ---------- App ---------- */
export default function App(): JSX.Element {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [language, setLanguage] = useState<string>(() => localStorage.getItem("lang") || "pt");
  const t = translations[language];
  const products = productsBase(t);
  const [theme, setTheme] = useState<"light" | "dark">(() => (localStorage.getItem("theme") as "light" | "dark") || "light");
  const { index: testimonialIndex, setIndex: setTestimonialIndex } = useAutoCarousel(initialTestimonials.length, 4500);
  const [testimonials] = useState(initialTestimonials);
  const [iaInput, setIaInput] = useState("");
  const [iaResult, setIaResult] = useState<any>(null);
  const heroRef = useRef(null);
  const heroInView = useInView(heroRef, { once: true });
  const [modal, setModal] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    localStorage.setItem("lang", language);
  }, [language]);

  useEffect(() => {
    localStorage.setItem("theme", theme);
    if (theme === "dark") document.documentElement.classList.add("dark");
    else document.documentElement.classList.remove("dark");
  }, [theme]);

  useEffect(() => {
    // Initialize theme on mount
    if (localStorage.getItem("theme") === "dark") document.documentElement.classList.add("dark");
  }, []);

  const handleAnalyze = () => {
    const result = simulateAiScore(iaInput);
    setIaResult(result);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800 text-slate-900 dark:text-slate-100">
      {/* Header */}
      <header className="fixed top-0 left-0 right-0 bg-white/70 dark:bg-slate-900/60 glass backdrop-blur-md border-b border-gray-200 dark:border-slate-700 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <motion.div initial={{ opacity: 0, x: -12 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.45 }} className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center shadow-md">
                <span className="text-white font-bold text-xl">J</span>
              </div>
              <span className="text-lg font-bold">JOROGOTech</span>
            </motion.div>

            {/* Desktop nav */}
            <nav className="hidden md:flex items-center gap-4">
              <a href="#inicio" className="text-gray-700 dark:text-slate-200 hover:text-blue-600 transition">{t.home}</a>
              <a href="#produtos" className="text-gray-700 dark:text-slate-200 hover:text-blue-600 transition">{t.products}</a>
              <a href="#ia-detector" className="text-gray-700 dark:text-slate-200 hover:text-blue-600 transition">{t.detectorTitle}</a>
              <a href="#sobre" className="text-gray-700 dark:text-slate-200 hover:text-blue-600 transition">{t.about}</a>
              <a href="#contactos" className="text-gray-700 dark:text-slate-200 hover:text-blue-600 transition">{t.contact}</a>
            </nav>

            {/* Right controls */}
            <div className="flex items-center gap-3">
              <button
                onClick={() => {
                  const next = language === "pt" ? "en" : "pt";
                  setLanguage(next);
                }}
                className="hidden sm:inline-flex items-center gap-2 px-3 py-1 bg-gray-100 dark:bg-slate-800 rounded-lg hover:bg-gray-200 transition"
                aria-label="Toggle language"
              >
                <Globe size={16} />
                <span className="text-sm">{language === "pt" ? "PT" : "EN"}</span>
              </button>

              <button
                onClick={() => setTheme((prev) => (prev === "light" ? "dark" : "light"))}
                className="inline-flex items-center gap-2 px-3 py-1 bg-gray-100 dark:bg-slate-800 rounded-lg hover:bg-gray-200 transition"
                aria-label="Toggle theme"
              >
                <SunMoon size={16} />
                <span className="text-sm">{theme === "light" ? "Light" : "Dark"}</span>
              </button>

              <button className="hidden md:inline-flex px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-lg shadow-md hover:opacity-95">
                {t.start}
              </button>

              <button onClick={() => setMobileMenuOpen((s) => !s)} className="md:hidden p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800">
                {mobileMenuOpen ? <X size={20} /> : <Menu size={20} />}
              </button>
            </div>
          </div>

          {/* Mobile menu */}
          <AnimatePresence initial={false}>
            {mobileMenuOpen && (
              <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: "auto" }} exit={{ opacity: 0, height: 0 }} className="md:hidden py-3 space-y-2">
                <a href="#inicio" className="block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"> {t.home} </a>
                <a href="#produtos" className="block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"> {t.products} </a>
                <a href="#ia-detector" className="block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"> {t.detectorTitle} </a>
                <a href="#sobre" className="block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"> {t.about} </a>
                <a href="#contactos" className="block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"> {t.contact} </a>
                <div className="px-3">
                  <button className="w-full px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-lg">{t.start}</button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </header>

      {/* Hero */}
      <section id="inicio" ref={heroRef} className="pt-28 pb-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid lg:grid-cols-2 gap-10 items-center">
            <motion.div initial={{ opacity: 0, y: 18 }} animate={heroInView ? { opacity: 1, y: 0 } : {}} transition={{ duration: 0.65 }} className="space-y-6">
              <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold leading-tight">
                {t.heroTitle.split(" ").slice(0, 2).join(" ")}{" "}
                <span className="bg-gradient-to-r from-cyan-500 to-blue-600 bg-clip-text text-transparent">
                  {t.heroTitle.split(" ").slice(2).join(" ")}
                </span>
              </h1>
              <p className="text-lg text-gray-600 dark:text-slate-300 max-w-2xl">{t.heroSubtitle}</p>

              <div className="flex gap-4 flex-col sm:flex-row">
                <motion.button whileHover={{ scale: 1.03 }} className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-lg flex items-center gap-3 font-semibold shadow-md">
                  {t.products} <ArrowRight size={18} />
                </motion.button>
                <motion.button onClick={() => setModal("contact")} whileHover={{ scale: 1.03 }} className="px-6 py-3 bg-white border-2 border-gray-200 dark:bg-slate-800 dark:border-slate-700 text-gray-700 dark:text-slate-200 rounded-lg hover:border-blue-500 hover:text-blue-600 transition-all font-semibold">
                  {t.contact}
                </motion.button>
              </div>
            </motion.div>

            <motion.div initial={{ opacity: 0, scale: 0.96 }} animate={heroInView ? { opacity: 1, scale: 1 } : {}} transition={{ duration: 0.6 }} className="relative">
              <div className="relative w-full h-80 md:h-96 bg-gradient-to-br from-cyan-400 via-blue-500 to-blue-600 rounded-3xl shadow-2xl overflow-hidden">
                <div className="absolute inset-0 flex items-center justify-center">
                  <Brain size={120} className="text-white opacity-20" />
                </div>
                <div className="absolute inset-0 bg-gradient-to-t from-blue-900/40 to-transparent"></div>
                <div className="absolute bottom-8 left-8 right-8">
                  <p className="text-white text-2xl font-bold">IA & Automação</p>
                  <p className="text-blue-100 mt-2">Transformando o futuro dos negócios</p>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Products */}
      <section id="produtos" className="py-16 px-4 sm:px-6 lg:px-8 bg-white dark:bg-slate-900">
        <div className="max-w-7xl mx-auto">
          <motion.div initial={{ opacity: 0, y: 20 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="text-center mb-12">
            <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-slate-100 mb-2">{t.productsTitle}</h2>
            <p className="text-gray-600 dark:text-slate-300">Soluções inovadoras para impulsionar o seu negócio</p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {products.map((p, idx) => {
              const Icon = p.icon;
              return (
                <motion.div
                  key={p.titleKey}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: idx * 0.08 }}
                  whileHover={{ y: -6, boxShadow: "0 18px 40px rgba(15,23,42,0.12)" }}
                  className="rounded-2xl p-6 bg-white dark:bg-slate-800 border border-gray-100 dark:border-slate-700 shadow-sm"
                >
                  <div className={`w-14 h-14 rounded-xl flex items-center justify-center mb-5 bg-gradient-to-br ${p.color} shadow-md`}>
                    <Icon size={26} className="text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-3 text-slate-900 dark:text-slate-100">{p.titleKey}</h3>
                  <p className="text-gray-600 dark:text-slate-300 mb-6 leading-relaxed">{p.descriptionKey}</p>
                  <a href={p.titleKey.toLowerCase().includes("detector") ? "#ia-detector" : "#produtos"} className="w-full inline-flex px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-blue-600 transition-colors items-center justify-center gap-2">
                    {t.start} <ArrowRight size={16} />
                  </a>
                </motion.div>
              );
            })}
          </div>
        </div>
      </section>

      {/* IA Detector Demo */}
      <section id="ia-detector" className="py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-50 to-white dark:from-slate-800 dark:to-slate-900">
        <div className="max-w-6xl mx-auto">
          <motion.div initial={{ opacity: 0, y: 16 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="text-center mb-8">
            <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-slate-100 mb-3">{t.detectorTitle}</h2>
            <p className="text-gray-600 dark:text-slate-300 max-w-2xl mx-auto">Analisa textos e indica, de forma simulada, se o conteúdo tem probabilidade de ter sido gerado por IA — ideal para demos e pré-triagem.</p>
          </motion.div>

          <div className="grid lg:grid-cols-2 gap-8 items-start">
            <motion.div initial={{ opacity: 0, x: -10 }} whileInView={{ opacity: 1, x: 0 }} transition={{ duration: 0.6 }} className="bg-gradient-to-br from-cyan-500 to-blue-600 rounded-3xl p-8 shadow-xl text-white">
              <div className="mb-4 flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-14 h-14 bg-white/10 rounded-lg flex items-center justify-center">
                    <Brain size={28} className="text-white" />
                  </div>
                  <div>
                    <p className="font-semibold text-lg">IA Detector — (Simulado)</p>
                    <p className="text-blue-100 text-sm">Demo</p>
                  </div>
                </div>
                <div className="text-sm text-blue-100">Beta</div>
              </div>

              <textarea
                value={iaInput}
                onChange={(e) => setIaInput(e.target.value)}
                rows={8}
                placeholder={t.detectorPlaceholder}
                className="w-full rounded-xl p-4 mb-4 text-slate-900 resize-y"
              />

              <div className="flex gap-3">
                <button onClick={handleAnalyze} className="px-5 py-2 bg-white text-blue-600 rounded-lg font-semibold hover:shadow-lg transition-all flex items-center gap-2">
                  {t.detectorAnalyze}
                </button>
                <button onClick={() => { setIaInput(""); setIaResult(null); }} className="px-4 py-2 bg-white/20 border border-white/30 text-white rounded-lg hover:bg-white/30 transition-all">
                  {t.detectorClear}
                </button>
              </div>

              <div className="mt-6">
                <p className="text-sm text-blue-100 italic">{t.detectorNote}</p>
              </div>
            </motion.div>

            <motion.div initial={{ opacity: 0, x: 10 }} whileInView={{ opacity: 1, x: 0 }} transition={{ duration: 0.6 }} className="space-y-4">
              <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow border border-gray-100 dark:border-slate-700">
                <h3 className="text-lg font-semibold mb-2">Resultado</h3>
                {!iaResult && <p className="text-gray-600 dark:text-slate-300">{t.resultEmpty}</p>}
                {iaResult && (
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xl font-semibold">{iaResult.verdict}</p>
                        <p className="text-sm text-gray-500 dark:text-slate-400">Confiança aproximada</p>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold">{iaResult.confidence}%</div>
                        <div className="text-xs text-gray-400">Simulação</div>
                      </div>
                    </div>

                    <div className="w-full bg-gray-100 dark:bg-slate-700 rounded-full h-3 overflow-hidden">
                      <div className="h-3 rounded-full bg-gradient-to-r from-green-400 to-blue-600" style={{ width: `${iaResult.confidence}%` }} />
                    </div>

                    <div className="grid grid-cols-2 gap-3 text-sm text-gray-600 dark:text-slate-300">
                      <div className="bg-gray-50 dark:bg-slate-900 p-3 rounded-md border border-gray-100 dark:border-slate-700">
                        <div className="text-xs text-gray-400 dark:text-slate-400">{t.resultWords}</div>
                        <div className="font-medium">{iaResult.totalWords}</div>
                      </div>
                      <div className="bg-gray-50 dark:bg-slate-900 p-3 rounded-md border border-gray-100 dark:border-slate-700">
                        <div className="text-xs text-gray-400 dark:text-slate-400">{t.resultDiversity}</div>
                        <div className="font-medium">{iaResult.diversity}</div>
                      </div>
                      <div className="bg-gray-50 dark:bg-slate-900 p-3 rounded-md border border-gray-100 dark:border-slate-700">
                        <div className="text-xs text-gray-400 dark:text-slate-400">{t.resultRepetition}</div>
                        <div className="font-medium">{iaResult.repetitiveness}</div>
                      </div>
                      <div className="bg-gray-50 dark:bg-slate-900 p-3 rounded-md border border-gray-100 dark:border-slate-700">
                        <div className="text-xs text-gray-400 dark:text-slate-400">{t.resultScore}</div>
                        <div className="font-medium">{iaResult.score}</div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow border border-gray-100 dark:border-slate-700">
                <h3 className="text-lg font-semibold mb-2">Como usar</h3>
                <ol className="list-decimal pl-5 text-gray-600 dark:text-slate-300 space-y-2 text-sm">
                  <li>Cole o texto que deseja analisar (artigos, trabalhos, mensagens).</li>
                  <li>Carrega em <span className="font-semibold">{t.detectorAnalyze}</span> e vê o resultado simulado.</li>
                  <li>Usa como pré-triagem — para resultados formais, recorre a ferramentas especializadas.</li>
                </ol>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* About */}
      <section id="sobre" className="py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid lg:grid-cols-2 gap-10 items-center">
            <motion.div initial={{ opacity: 0, x: -20 }} whileInView={{ opacity: 1, x: 0 }} transition={{ duration: 0.6 }} className="space-y-6">
              <h2 className="text-3xl sm:text-4xl font-bold">{t.aboutTitle}</h2>
              <p className="text-gray-600 dark:text-slate-300 max-w-xl leading-relaxed">
                A JOROGOTech é uma startup focada em criar soluções digitais acessíveis e inteligentes para negócios e empreendedores. Acreditamos no poder da IA e da automação para simplificar processos e impulsionar resultados.
              </p>

              <div className="grid grid-cols-3 gap-4">
                {[{ text: "Inovação" }, { text: "Simplicidade" }, { text: "Desempenho" }].map((h, i) => (
                  <motion.div key={h.text} initial={{ opacity: 0, scale: 0.95 }} whileInView={{ opacity: 1, scale: 1 }} transition={{ duration: 0.4, delay: i * 0.06 }} className="text-center">
                    <div className="w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-full flex items-center justify-center">
                      <CheckCircle2 size={18} className="text-white" />
                    </div>
                    <p className="font-semibold text-gray-900 dark:text-slate-100">{h.text}</p>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            <motion.div initial={{ opacity: 0, x: 20 }} whileInView={{ opacity: 1, x: 0 }} transition={{ duration: 0.6 }} className="relative">
              <div className="relative w-full h-72 md:h-96 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-3xl shadow-2xl overflow-hidden flex items-center justify-center">
                <TrendingUp size={120} className="text-white opacity-18" />
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-16 px-4 sm:px-6 lg:px-8 bg-white dark:bg-slate-900">
        <div className="max-w-6xl mx-auto">
          <motion.div initial={{ opacity: 0, y: 16 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="text-center mb-8">
            <h2 className="text-3xl sm:text-4xl font-bold">{t.testimonialsTitle}</h2>
            <p className="text-gray-600 dark:text-slate-300">Feedback real de utilizadores e parceiros beta</p>
          </motion.div>

          <div className="relative">
            <div className="flex items-center justify-between mb-6">
              <div className="text-sm text-gray-500 dark:text-slate-400">Depoimentos</div>
              <div className="flex gap-2">
                <button onClick={() => setTestimonialIndex((testimonialIndex - 1 + testimonials.length) % testimonials.length)} className="p-2 rounded-lg bg-gray-100 dark:bg-slate-800">
                  <ChevronLeft size={18} />
                </button>
                <button onClick={() => setTestimonialIndex((testimonialIndex + 1) % testimonials.length)} className="p-2 rounded-lg bg-gray-100 dark:bg-slate-800">
                  <ChevronRight size={18} />
                </button>
              </div>
            </div>

            <div className="overflow-hidden">
              <AnimatePresence initial={false} mode="wait">
                <motion.div key={testimonialIndex} initial={{ opacity: 0, y: 18 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -18 }} transition={{ duration: 0.55 }} className="bg-gradient-to-br from-gray-50 to-white dark:from-slate-800 dark:to-slate-800 p-8 rounded-2xl shadow-lg border border-gray-100 dark:border-slate-700">
                  <p className="text-lg italic text-gray-700 dark:text-slate-300 mb-4">“{testimonials[testimonialIndex].quote}”</p>
                  <p className="text-gray-900 dark:text-slate-100 font-semibold">— {testimonials[testimonialIndex].author}</p>
                </motion.div>
              </AnimatePresence>
            </div>
          </div>
        </div>
      </section>

      {/* CTA */}
      <section id="contactos" className="py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-cyan-600 via-blue-600 to-blue-700">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div initial={{ opacity: 0, y: 18 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
            <h2 className="text-3xl sm:text-4xl font-bold text-white mb-4">{t.ctaText}</h2>
            <p className="text-blue-100 mb-8">{t.heroSubtitle}</p>
            <button className="px-8 py-3 bg-white text-blue-600 rounded-lg hover:shadow-2xl transition-all text-lg font-bold flex items-center gap-3 mx-auto">
              {t.ctaButton} <ArrowRight size={18} />
            </button>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 dark:bg-slate-900 text-white py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid md:grid-cols-3 gap-8 mb-8">
            <div>
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-xl">J</span>
                </div>
                <span className="text-xl font-bold">JOROGOTech</span>
              </div>
              <p className="text-gray-400">Tecnologia e IA ao serviço da inovação.</p>
            </div>

            <div>
              <h3 className="text-lg font-semibold mb-4">Links Rápidos</h3>
              <ul className="space-y-2">
                <li><button onClick={() => setModal("terms")} className="text-gray-400 hover:text-white">Termos</button></li>
                <li><button onClick={() => setModal("privacy")} className="text-gray-400 hover:text-white">Privacidade</button></li>
                <li><button onClick={() => setModal("support")} className="text-gray-400 hover:text-white">Suporte</button></li>
                <li><button onClick={() => setModal("contact")} className="text-gray-400 hover:text-white">Contacto</button></li>
              </ul>
            </div>

            <div>
              <h3 className="text-lg font-semibold mb-4">Redes Sociais</h3>
              <div className="flex space-x-3">
                <a href="#" className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-blue-600 transition-colors"><Linkedin size={18} /></a>
                <a href="#" className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-blue-600 transition-colors"><Github size={18} /></a>
                <a href="#" className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-blue-600 transition-colors"><Facebook size={18} /></a>
              </div>
            </div>
          </div>

          <div className="border-t border-gray-800 pt-6 text-center text-gray-400">
            <p>&copy; {new Date().getFullYear()} JOROGOTech. Todos os direitos reservados. • <span className="text-sm">Powered by JOROGOTech AI (Beta)</span></p>
          </div>
        </div>
      </footer>

      {/* Modals */}
      {modal === "terms" && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-slate-800 p-6 rounded-lg max-w-lg w-full relative">
            <button onClick={() => setModal(null)} className="absolute top-3 right-3 text-gray-500 hover:text-gray-800 dark:hover:text-gray-300">&times;</button>
            <h2 className="text-xl font-bold mb-4">Termos de Uso</h2>
            <p className="text-gray-600 dark:text-slate-300">Bem-vindo à JOROGOTech. Ao utilizar nossos serviços, você concorda com os seguintes termos:</p>
            <ul className="list-disc pl-5 text-gray-600 dark:text-slate-300 mt-3">
              <li>Uso Responsável: Utilize os serviços apenas para fins legais e legítimos.</li>
              <li>Propriedade Intelectual: Todos os direitos sobre os produtos e conteúdos pertencem à JOROGOTech.</li>
              <li>Limitação de Responsabilidade: Não nos responsabilizamos por danos resultantes do uso indevido.</li>
              <li>Alterações: Estes termos podem ser atualizados sem aviso prévio.</li>
            </ul>
            <button onClick={() => setModal(null)} className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg">Fechar</button>
          </div>
        </div>
      )}
      {modal === "privacy" && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-slate-800 p-6 rounded-lg max-w-lg w-full relative">
            <button onClick={() => setModal(null)} className="absolute top-3 right-3 text-gray-500 hover:text-gray-800 dark:hover:text-gray-300">&times;</button>
            <h2 className="text-xl font-bold mb-4">Política de Privacidade</h2>
            <p className="text-gray-600 dark:text-slate-300">A JOROGOTech respeita sua privacidade e está comprometida com a proteção de seus dados:</p>
            <ul className="list-disc pl-5 text-gray-600 dark:text-slate-300 mt-3">
              <li>Coleta de Dados: Apenas informações necessárias para funcionamento do site e serviços.</li>
              <li>Uso de Dados: Para comunicação, suporte e melhoria dos serviços.</li>
              <li>Cookies: Utilizados para melhorar sua experiência.</li>
              <li>Compartilhamento: Não compartilhamos dados pessoais sem consentimento.</li>
            </ul>
            <button onClick={() => setModal(null)} className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg">Fechar</button>
          </div>
        </div>
      )}
      {modal === "support" && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-slate-800 p-6 rounded-lg max-w-lg w-full relative">
            <button onClick={() => setModal(null)} className="absolute top-3 right-3 text-gray-500 hover:text-gray-800 dark:hover:text-gray-300">&times;</button>
            <h2 className="text-xl font-bold mb-4">Centro de Suporte JOROGOTech</h2>
            <p className="text-gray-600 dark:text-slate-300 mb-4">Encontra ajuda rápida para resolver dúvidas, problemas técnicos ou pedidos de assistência.</p>
            <form onSubmit={(e) => { e.preventDefault(); setSuccessMessage("✅ O teu pedido de suporte foi enviado! A equipa técnica da JOROGOTech responderá em até 24 horas úteis."); setModal(null); }}>
              <input type="text" placeholder="Nome completo" required className="w-full mb-3 p-2 border rounded" />
              <input type="email" placeholder="E-mail de login" required className="w-full mb-3 p-2 border rounded" />
              <select className="w-full mb-3 p-2 border rounded">
                <option>Assistente de Atendimento</option>
                <option>Finance Planner</option>
                <option>Gibbon EDU</option>
              </select>
              <select className="w-full mb-3 p-2 border rounded">
                <option>Erro técnico</option>
                <option>Acesso</option>
                <option>Pagamento</option>
                <option>Sugestão</option>
              </select>
              <textarea placeholder="Mensagem detalhada" required className="w-full mb-3 p-2 border rounded"></textarea>
              <input type="file" className="w-full mb-3 p-2 border rounded" />
              <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-lg">Enviar Pedido</button>
            </form>
            <div className="mt-4 text-sm text-gray-500">
              <p>E-mail: support.jorogotech@gmail.com</p>
              <p>Portal: https://jorogotech.github.io/support</p>
              <p>WhatsApp Técnico: +244 923 000 000</p>
              <p>Atendimento: Segunda a Sábado — 8h às 20h</p>
            </div>
          </div>
        </div>
      )}
      {modal === "contact" && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-slate-800 p-6 rounded-lg max-w-lg w-full relative">
            <button onClick={() => setModal(null)} className="absolute top-3 right-3 text-gray-500 hover:text-gray-800 dark:hover:text-gray-300">&times;</button>
            <h2 className="text-xl font-bold mb-4">Entre em contacto com a JOROGOTech</h2>
            <p className="text-gray-600 dark:text-slate-300 mb-4">Estamos prontos para colaborar, desenvolver soluções inteligentes e transformar ideias em tecnologia.</p>
            <form onSubmit={(e) => { e.preventDefault(); setSuccessMessage("✅ Obrigado! A tua mensagem foi enviada com sucesso. Em breve entraremos em contacto."); setModal(null); }}>
              <input type="text" placeholder="Nome completo" required className="w-full mb-3 p-2 border rounded" />
              <input type="email" placeholder="E-mail" required className="w-full mb-3 p-2 border rounded" />
              <input type="text" placeholder="Assunto" required className="w-full mb-3 p-2 border rounded" />
              <textarea placeholder="Mensagem" required className="w-full mb-3 p-2 border rounded"></textarea>
              <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-lg">Enviar Mensagem</button>
            </form>
            <div className="mt-4 text-sm text-gray-500">
              <p>E-mail: jorogotech.contact@gmail.com</p>
              <p>Website: https://jorogotech.github.io</p>
              <p>WhatsApp: +244 923 000 000</p>
              <p>Localização: Luanda, Angola</p>
              <p>Horário: Segunda a Sexta — 8h às 17h</p>
            </div>
          </div>
        </div>
      )}

      {/* Success Message */}
      {successMessage && (
        <div className="fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg">
          {successMessage}
          <button onClick={() => setSuccessMessage(null)} className="ml-4 text-sm underline">Fechar</button>
        </div>
      )}
    </div>
  );
}
